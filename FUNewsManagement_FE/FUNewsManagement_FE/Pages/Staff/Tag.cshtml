@page
@model DoHoangAnh_SE1842NET_A01_FE.Pages.Staff.TagModel
@{
    ViewData["Title"] = "Tag Management";
}

<div class="w-screen mx-auto">
    <!-- Header -->
    <div class="bg-white rounded-2xl shadow-2xl p-8 mb-8">
        <div class="flex justify-between items-center">
            <h1 class="text-4xl font-bold text-gray-800">
                <i class="fas fa-tags text-blue-600 mr-3"></i>Tag Management
            </h1>
            <button onclick="showAddTagModal()" class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-6 py-3 rounded-lg font-semibold hover:shadow-lg hover:scale-105 transition-all duration-200 flex items-center gap-2">
                <i class="fas fa-plus"></i>
                <span>Add Tag</span>
            </button>
        </div>
    </div>

    <!-- Search Section -->
    <div class="bg-white rounded-2xl shadow-xl p-6 mb-8">
        <div class="flex gap-4">
            <div class="flex-1">
                <label class="block text-sm font-semibold text-gray-700 mb-2">Search Tags</label>
                <input type="text" id="searchInput" placeholder="Search by tag name or note..." class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            </div>
            <div class="flex items-end gap-3">
                <button id="searchBtn" class="bg-blue-600 text-white px-6 py-2 rounded-lg font-semibold hover:bg-blue-700 transition-colors h-[42px]">
                    <i class="fas fa-search mr-2"></i>Search
                </button>
                <button id="resetBtn" class="bg-gray-200 text-gray-800 px-6 py-2 rounded-lg font-semibold hover:bg-gray-300 transition-colors h-[42px]">
                    <i class="fas fa-redo mr-2"></i>Reset
                </button>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    <div id="loading" class="bg-white rounded-2xl shadow-xl p-12 text-center">
        <i class="fas fa-spinner fa-spin text-5xl text-blue-600 mb-4"></i>
        <p class="text-gray-600 text-lg">Loading tags...</p>
    </div>

    <!-- Error State -->
    <div id="error" class="hidden bg-red-50 border-2 border-red-200 rounded-2xl shadow-xl p-8 text-center">
        <i class="fas fa-exclamation-circle text-5xl text-red-500 mb-4"></i>
        <p class="text-red-700 text-lg font-semibold mb-2">Error Loading Tags</p>
        <p id="errorMessage" class="text-red-600"></p>
    </div>

    <!-- Tags Table -->
    <div id="tagsTable" class="hidden bg-white rounded-2xl shadow-2xl overflow-hidden">
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white">
                    <tr>
                        <th class="px-6 py-4 text-left text-sm font-bold uppercase tracking-wider">ID</th>
                        <th class="px-6 py-4 text-left text-sm font-bold uppercase tracking-wider">Tag Name</th>
                        <th class="px-6 py-4 text-left text-sm font-bold uppercase tracking-wider">Note</th>
                        <th class="px-6 py-4 text-center text-sm font-bold uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody id="tagsTableBody" class="divide-y divide-gray-200">
                    <!-- Data will be inserted here -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Empty State -->
    <div id="emptyState" class="hidden bg-white rounded-2xl shadow-xl p-12 text-center">
        <i class="fas fa-inbox text-6xl text-gray-300 mb-4"></i>
        <p class="text-gray-600 text-lg">No tags found</p>
    </div>
</div>

<!-- Add Tag Modal -->
<div id="addTagModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
    <div class="bg-white rounded-2xl shadow-2xl max-w-2xl w-full transform transition-all">
        <div class="p-8">
            <!-- Modal Header -->
            <div class="flex items-center justify-between mb-6 pb-4 border-b border-gray-200">
                <h2 class="text-2xl font-bold text-gray-800">
                    <i class="fas fa-plus-circle text-blue-600 mr-2"></i>Add New Tag
                </h2>
                <button onclick="closeAddTagModal()" class="text-gray-500 hover:text-gray-700 transition-colors">
                    <i class="fas fa-times text-2xl"></i>
                </button>
            </div>

            <!-- Success Message -->
            <div id="addSuccessMessage" class="hidden bg-green-50 border-2 border-green-200 rounded-lg p-4 mb-6">
                <div class="flex items-center gap-3">
                    <i class="fas fa-check-circle text-2xl text-green-600"></i>
                    <div>
                        <p class="text-green-800 font-semibold">Success!</p>
                        <p class="text-green-700 text-sm">Tag created successfully.</p>
                    </div>
                </div>
            </div>

            <!-- Error Message -->
            <div id="addErrorMessage" class="hidden bg-red-50 border-2 border-red-200 rounded-lg p-4 mb-6">
                <div class="flex items-center gap-3">
                    <i class="fas fa-exclamation-circle text-2xl text-red-600"></i>
                    <div>
                        <p class="text-red-800 font-semibold">Error!</p>
                        <p id="addErrorText" class="text-red-700 text-sm"></p>
                    </div>
                </div>
            </div>

            <!-- Form -->
            <form id="addTagForm" class="space-y-6">
                <!-- Tag Name -->
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                        Tag Name <span class="text-red-500">*</span>
                    </label>
                    <input type="text" id="addTagName" required
                           class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                           placeholder="Enter tag name">
                </div>

                <!-- Note -->
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                        Note <span class="text-red-500">*</span>
                    </label>
                    <textarea id="addTagNote" required rows="4"
                              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                              placeholder="Enter note or description"></textarea>
                </div>
            </form>

            <!-- Action Buttons -->
            <div class="flex gap-4 pt-6 mt-6 border-t border-gray-200">
                <button type="button" id="submitAddBtn" onclick="createTag()"
                        class="flex-1 bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-6 py-3 rounded-lg font-semibold hover:shadow-lg hover:scale-105 transition-all duration-200 flex items-center justify-center gap-2">
                    <i class="fas fa-save"></i>
                    <span>Create Tag</span>
                </button>
                <button type="button" onclick="closeAddTagModal()"
                        class="flex-1 bg-gray-200 text-gray-800 px-6 py-3 rounded-lg font-semibold hover:bg-gray-300 transition-colors">
                    <i class="fas fa-times mr-2"></i>Cancel
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Tag Modal -->
<div id="editTagModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
    <div class="bg-white rounded-2xl shadow-2xl max-w-2xl w-full transform transition-all">
        <div class="p-8">
            <!-- Modal Header -->
            <div class="flex items-center justify-between mb-6 pb-4 border-b border-gray-200">
                <h2 class="text-2xl font-bold text-gray-800">
                    <i class="fas fa-edit text-blue-600 mr-2"></i>Edit Tag
                </h2>
                <button onclick="closeEditTagModal()" class="text-gray-500 hover:text-gray-700 transition-colors">
                    <i class="fas fa-times text-2xl"></i>
                </button>
            </div>

            <!-- Success Message -->
            <div id="editSuccessMessage" class="hidden bg-green-50 border-2 border-green-200 rounded-lg p-4 mb-6">
                <div class="flex items-center gap-3">
                    <i class="fas fa-check-circle text-2xl text-green-600"></i>
                    <div>
                        <p class="text-green-800 font-semibold">Success!</p>
                        <p class="text-green-700 text-sm">Tag updated successfully.</p>
                    </div>
                </div>
            </div>

            <!-- Error Message -->
            <div id="editErrorMessage" class="hidden bg-red-50 border-2 border-red-200 rounded-lg p-4 mb-6">
                <div class="flex items-center gap-3">
                    <i class="fas fa-exclamation-circle text-2xl text-red-600"></i>
                    <div>
                        <p class="text-red-800 font-semibold">Error!</p>
                        <p id="editErrorText" class="text-red-700 text-sm"></p>
                    </div>
                </div>
            </div>

            <!-- Form -->
            <form id="editTagForm" class="space-y-6">
                <input type="hidden" id="editTagId">

                <!-- Tag Name -->
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                        Tag Name <span class="text-red-500">*</span>
                    </label>
                    <input type="text" id="editTagName" required
                           class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                           placeholder="Enter tag name">
                </div>

                <!-- Note -->
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                        Note <span class="text-red-500">*</span>
                    </label>
                    <textarea id="editTagNote" required rows="4"
                              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                              placeholder="Enter note or description"></textarea>
                </div>
            </form>

            <!-- Action Buttons -->
            <div class="flex gap-4 pt-6 mt-6 border-t border-gray-200">
                <button type="button" id="submitEditBtn" onclick="updateTag()"
                        class="flex-1 bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-6 py-3 rounded-lg font-semibold hover:shadow-lg hover:scale-105 transition-all duration-200 flex items-center justify-center gap-2">
                    <i class="fas fa-save"></i>
                    <span>Update Tag</span>
                </button>
                <button type="button" onclick="closeEditTagModal()"
                        class="flex-1 bg-gray-200 text-gray-800 px-6 py-3 rounded-lg font-semibold hover:bg-gray-300 transition-colors">
                    <i class="fas fa-times mr-2"></i>Cancel
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteTagModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
    <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full transform transition-all">
        <div class="p-8">
            <div class="flex items-center justify-center w-16 h-16 mx-auto bg-red-100 rounded-full mb-4">
                <i class="fas fa-trash-alt text-3xl text-red-600"></i>
            </div>
            <h3 class="text-2xl font-bold text-gray-900 text-center mb-2">Delete Tag</h3>
            <p class="text-gray-600 text-center mb-2">Are you sure you want to delete this tag?</p>
            <p class="text-gray-900 font-semibold text-center mb-6">
                <span id="deleteTagName" class="text-blue-600"></span>
            </p>
            <p class="text-gray-500 text-sm text-center mb-6">This action cannot be undone.</p>
            <input type="hidden" id="deleteTagId">
            <div class="flex gap-4">
                <button id="cancelDelete" class="flex-1 bg-gray-200 text-gray-800 px-6 py-3 rounded-lg font-semibold hover:bg-gray-300 transition-colors">
                    Cancel
                </button>
                <button id="confirmDelete" class="flex-1 bg-red-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-red-700 transition-colors">
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const API_BASE_URL = 'https://localhost:7000/api/tag';
        let allTags = [];
        let currentDeleteTagId = null;

        $(document).ready(function() {
            loadTags();

            // Search functionality
            $('#searchBtn').click(searchTags);
            $('#resetBtn').click(resetSearch);
            $('#searchInput').keypress(function(e) {
                if (e.which === 13) {
                    searchTags();
                }
            });

            // Delete modal buttons
            $('#cancelDelete').click(function() {
                closeDeleteModal();
            });

            $('#confirmDelete').click(function() {
                if (currentDeleteTagId) {
                    deleteTag(currentDeleteTagId);
                }
            });
        });

        // Show Add Tag Modal
        function showAddTagModal() {
            $('#addTagModal').removeClass('hidden');
            $('#addTagForm')[0].reset();
            $('#addSuccessMessage').addClass('hidden');
            $('#addErrorMessage').addClass('hidden');
        }

        // Close Add Tag Modal
        function closeAddTagModal() {
            $('#addTagModal').addClass('hidden');
        }

        // Show Edit Tag Modal
        function showEditTagModal(id, name, note) {
            $('#editTagId').val(id);
            $('#editTagName').val(name);
            $('#editTagNote').val(note);
            $('#editSuccessMessage').addClass('hidden');
            $('#editErrorMessage').addClass('hidden');
            $('#editTagModal').removeClass('hidden');
        }

        // Close Edit Tag Modal
        function closeEditTagModal() {
            $('#editTagModal').addClass('hidden');
        }

        // Show Delete Modal
        function showDeleteModal(id, name) {
            currentDeleteTagId = id;
            $('#deleteTagId').val(id);
            $('#deleteTagName').text(name);
            $('#deleteTagModal').removeClass('hidden');
        }

        // Close Delete Modal
        function closeDeleteModal() {
            $('#deleteTagModal').addClass('hidden');
            currentDeleteTagId = null;
        }

        // Load all tags
        async function loadTags() {
            const token = await ensureValidAccessToken();
            if (!token) {
                window.location.href = "/Login";
                return;
            }

            $('#loading').show();
            $('#tagsTable').addClass('hidden');
            $('#emptyState').addClass('hidden');
            $('#error').addClass('hidden');

            $.ajax({
                url: API_BASE_URL,
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + token
                },
                success: function(result) {
                    $('#loading').hide();

                    if (result.statusCode === 200 && result.data) {
                        allTags = result.data;
                        if (allTags.length > 0) {
                            displayTags(allTags);
                            $('#tagsTable').removeClass('hidden');
                        } else {
                            $('#emptyState').removeClass('hidden');
                        }
                    } else {
                        showError('Failed to load tags');
                    }
                },
                error: function(xhr, status, error) {
                    $('#loading').hide();
                    showError('Error loading tags: ' + (xhr.responseJSON?.message || error));
                }
            });
        }

        // Display tags in table
        function displayTags(tags) {
            const tbody = $('#tagsTableBody');
            tbody.empty();

            if (tags.length === 0) {
                $('#tagsTable').addClass('hidden');
                $('#emptyState').removeClass('hidden');
                return;
            }

            tags.forEach(function(tag, index) {
                const row = `
                    <tr class="hover:bg-gray-50 transition-colors ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}">
                        <td class="px-6 py-4 text-sm font-medium text-gray-900">${tag.tagId}</td>
                        <td class="px-6 py-4">
                            <div class="text-sm font-semibold text-gray-900">${escapeHtml(tag.tagName)}</div>
                        </td>
                        <td class="px-6 py-4 text-sm text-gray-700">${escapeHtml(tag.note || 'N/A')}</td>
                        <td class="px-6 py-4">
                            <div class="flex items-center justify-center gap-2">
                                <button onclick="showEditTagModal(${tag.tagId}, '${escapeHtml(tag.tagName)}', '${escapeHtml(tag.note)}')"
                                        class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors text-sm font-medium">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button onclick="showDeleteModal(${tag.tagId}, '${escapeHtml(tag.tagName)}')"
                                        class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors text-sm font-medium">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
                tbody.append(row);
            });
        }

        // Search tags
        function searchTags() {
            const searchKey = $('#searchInput').val().toLowerCase().trim();

            if (!searchKey) {
                displayTags(allTags);
                return;
            }

            const filteredTags = allTags.filter(tag =>
                tag.tagName.toLowerCase().includes(searchKey) ||
                (tag.note && tag.note.toLowerCase().includes(searchKey))
            );

            displayTags(filteredTags);
        }

        // Reset search
        function resetSearch() {
            $('#searchInput').val('');
            displayTags(allTags);
        }

        // Create new tag
        async function createTag() {
            const token = await ensureValidAccessToken();
            if (!token) {
                window.location.href = "/Login";
                return;
            }

            const tagName = $('#addTagName').val().trim();
            const note = $('#addTagNote').val().trim();

            if (!tagName || !note) {
                showAddError('Please fill in all required fields.');
                return;
            }

            $('#submitAddBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin mr-2"></i>Creating...');

            $.ajax({
                url: API_BASE_URL,
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer ' + token,
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify({ tagName, note }),
                success: function(result) {
                    if (result.statusCode === 200) {
                        showAddSuccess();
                        setTimeout(function() {
                            closeAddTagModal();
                            loadTags();
                            $('#submitAddBtn').prop('disabled', false).html('<i class="fas fa-save"></i><span>Create Tag</span>');
                        }, 1500);
                    } else if (result.statusCode === 400) {
                        showAddError(result.message || 'Tag name already exists');
                        $('#submitAddBtn').prop('disabled', false).html('<i class="fas fa-save"></i><span>Create Tag</span>');
                    } else {
                        showAddError('Failed to add tag');
                        $('#submitAddBtn').prop('disabled', false).html('<i class="fas fa-save"></i><span>Create Tag</span>');
                    }
                },
                error: function(xhr, status, error) {
                    const errorMsg = xhr.responseJSON?.message || 'Error adding tag';
                    showAddError(errorMsg);
                    $('#submitAddBtn').prop('disabled', false).html('<i class="fas fa-save"></i><span>Create Tag</span>');
                }
            });
        }

        // Update tag
        async function updateTag() {
            const token = await ensureValidAccessToken();
            if (!token) {
                window.location.href = "/Login";
                return;
            }

            const tagId = parseInt($('#editTagId').val());
            const tagName = $('#editTagName').val().trim();
            const note = $('#editTagNote').val().trim();

            if (!tagName || !note) {
                showEditError('Please fill in all required fields.');
                return;
            }

            $('#submitEditBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin mr-2"></i>Updating...');

            $.ajax({
                url: API_BASE_URL,
                method: 'PUT',
                headers: {
                    'Authorization': 'Bearer ' + token,
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify({ tagId, tagName, note }),
                success: function(result) {
                    if (result.statusCode === 200) {
                        showEditSuccess();
                        setTimeout(function() {
                            closeEditTagModal();
                            loadTags();
                            $('#submitEditBtn').prop('disabled', false).html('<i class="fas fa-save"></i><span>Update Tag</span>');
                        }, 1500);
                    } else {
                        showEditError(result.message || 'Failed to update tag');
                        $('#submitEditBtn').prop('disabled', false).html('<i class="fas fa-save"></i><span>Update Tag</span>');
                    }
                },
                error: function(xhr, status, error) {
                    const errorMsg = xhr.responseJSON?.message || 'Error updating tag';
                    showEditError(errorMsg);
                    $('#submitEditBtn').prop('disabled', false).html('<i class="fas fa-save"></i><span>Update Tag</span>');
                }
            });
        }

        // Delete tag
        async function deleteTag(tagId) {
            const token = await ensureValidAccessToken();
            if (!token) {
                window.location.href = "/Login";
                return;
            }

            $.ajax({
                url: `${API_BASE_URL}/${tagId}`,
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + token
                },
                success: function(result) {
                    if (result.statusCode === 200) {
                        closeDeleteModal();
                        loadTags();
                    } else {
                        alert('Failed to delete tag: ' + (result.message || 'Unknown error'));
                        closeDeleteModal();
                    }
                },
                error: function(xhr, status, error) {
                    alert('Error deleting tag: ' + (xhr.responseJSON?.message || error));
                    closeDeleteModal();
                }
            });
        }

        // Show success/error messages
        function showAddSuccess() {
            $('#addSuccessMessage').removeClass('hidden');
            $('#addErrorMessage').addClass('hidden');
            $('#addTagModal .p-8').scrollTop(0);
        }

        function showAddError(message) {
            $('#addErrorText').text(message);
            $('#addErrorMessage').removeClass('hidden');
            $('#addSuccessMessage').addClass('hidden');
            $('#addTagModal .p-8').scrollTop(0);
        }

        function showEditSuccess() {
            $('#editSuccessMessage').removeClass('hidden');
            $('#editErrorMessage').addClass('hidden');
            $('#editTagModal .p-8').scrollTop(0);
        }

        function showEditError(message) {
            $('#editErrorText').text(message);
            $('#editErrorMessage').removeClass('hidden');
            $('#editSuccessMessage').addClass('hidden');
            $('#editTagModal .p-8').scrollTop(0);
        }

        function showError(message) {
            $('#errorMessage').text(message);
            $('#error').removeClass('hidden');
        }

        // Utility function
        function escapeHtml(text) {
            if (!text) return '';
            const map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            };
            return text.replace(/[&<>"']/g, m => map[m]);
        }

        // Close modals when clicking outside
        $('#addTagModal').click(function(e) {
            if (e.target.id === 'addTagModal') {
                closeAddTagModal();
            }
        });

        $('#editTagModal').click(function(e) {
            if (e.target.id === 'editTagModal') {
                closeEditTagModal();
            }
        });

        $('#deleteTagModal').click(function(e) {
            if (e.target.id === 'deleteTagModal') {
                closeDeleteModal();
            }
        });
    </script>
}