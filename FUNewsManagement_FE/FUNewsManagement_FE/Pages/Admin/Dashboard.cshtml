@page
@model FUNewsManagement_FE.Pages.Admin.DashboardModel
@{
    ViewData["Title"] = "Analytics Dashboard";
}

<style>
    .stat-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 1rem;
        padding: 1.5rem;
        color: white;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s, box-shadow 0.3s;
    }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        }

    .stat-card-success {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    }

    .stat-card-warning {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
    }

    .stat-card-info {
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    }

    .chart-container {
        position: relative;
        height: 400px;
        background: white;
        border-radius: 1rem;
        padding: 3.5rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    .filter-card {
        background: white;
        border-radius: 1rem;
        padding: 1.5rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
    }

    .trending-item {
        transition: all 0.3s;
        border-left: 4px solid transparent;
    }

        .trending-item:hover {
            border-left-color: #8b5cf6;
            background-color: #f9fafb;
            transform: translateX(5px);
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }

        .loading-overlay.show {
            display: flex;
        }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #8b5cf6;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>

<div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="flex justify-between items-center mb-8">
        <div>
            <h1 class="text-4xl font-bold text-gray-800">Analytics Dashboard</h1>
            <p class="text-gray-600 mt-2">Overview of news articles and performance metrics</p>
        </div>
        <button id="exportBtn" class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg flex items-center gap-2 transition-all transform hover:scale-105 shadow-lg">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Export to Excel
        </button>
    </div>

    <!-- Filters -->
    <div class="filter-card">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">Filters</h2>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">From Date</label>
                <input type="date" id="fromDate" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">To Date</label>
                <input type="date" id="toDate" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Category</label>
                <select id="categoryFilter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    <option value="">All Categories</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                <select id="statusFilter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    <option value="">All Status</option>
                    <option value="true">Published</option>
                    <option value="false">Not Published</option>
                </select>
            </div>
        </div>
        <div class="flex gap-3 mt-4">
            <button id="applyFilters" class="bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-6 rounded-lg transition-colors">
                Apply Filters
            </button>
            <button id="clearFilters" class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-semibold py-2 px-6 rounded-lg transition-colors">
                Clear
            </button>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="stat-card stat-card-success">
            <div class="flex justify-between items-start mb-4">
                <div>
                    <p class="text-white/80 text-sm font-medium">Published</p>
                    <h3 id="totalPublished" class="text-4xl font-bold mt-2">0</h3>
                </div>
                <div class="bg-white/20 p-3 rounded-lg">
                    <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </div>
            </div>
            <div class="flex items-center text-sm">
                <span id="publishedPercentage" class="font-semibold">0%</span>
                <span class="ml-2 text-white/80">of total</span>
            </div>
        </div>

        <div class="stat-card stat-card-warning">
            <div class="flex justify-between items-start mb-4">
                <div>
                    <p class="text-white/80 text-sm font-medium">Not Published</p>
                    <h3 id="totalNotPublished" class="text-4xl font-bold mt-2">0</h3>
                </div>
                <div class="bg-white/20 p-3 rounded-lg">
                    <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </div>
            </div>
            <div class="flex items-center text-sm">
                <span id="notPublishedPercentage" class="font-semibold">0%</span>
                <span class="ml-2 text-white/80">of total</span>
            </div>
        </div>

        <div class="stat-card stat-card-info">
            <div class="flex justify-between items-start mb-4">
                <div>
                    <p class="text-white/80 text-sm font-medium">Total Articles</p>
                    <h3 id="totalArticles" class="text-4xl font-bold mt-2">0</h3>
                </div>
                <div class="bg-white/20 p-3 rounded-lg">
                    <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z" />
                    </svg>
                </div>
            </div>
            <div class="flex items-center text-sm">
                <span class="font-semibold">All time</span>
            </div>
        </div>

        <div class="stat-card">
            <div class="flex justify-between items-start mb-4">
                <div>
                    <p class="text-white/80 text-sm font-medium">Categories</p>
                    <h3 id="totalCategories" class="text-4xl font-bold mt-2">0</h3>
                </div>
                <div class="bg-white/20 p-3 rounded-lg">
                    <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                    </svg>
                </div>
            </div>
            <div class="flex items-center text-sm">
                <span class="font-semibold">Active</span>
            </div>
        </div>
    </div>

    <!-- Charts -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <div class="chart-container">
            <h3 class="text-xl font-semibold text-gray-800 mb-4">Articles by Category</h3>
            <canvas id="categoryChart"></canvas>
        </div>
        <div class="chart-container">
            <h3 class="text-xl font-semibold text-gray-800 mb-4">Publication Status</h3>
            <canvas id="statusChart"></canvas>
        </div>
    </div>

    <!-- Trending Articles -->
    <div class="bg-white rounded-xl shadow-lg p-6">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-800">Trending Articles</h2>
            <span id="trendingCount" class="bg-purple-100 text-purple-800 px-4 py-1 rounded-full text-sm font-semibold">0 articles</span>
        </div>
        <div id="trendingList" class="space-y-4">
            <!-- Trending articles will be inserted here -->
        </div>
        <div id="emptyTrending" class="text-center py-12 text-gray-400 hidden">
            <svg class="w-20 h-20 mx-auto mb-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <p class="text-lg">No trending articles found</p>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="loading-overlay hidden">
    <div class="bg-white rounded-lg p-6 flex flex-col items-center">
        <div class="spinner mb-4"></div>
        <p class="text-gray-700 font-medium">Loading data...</p>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <script>
        const API_BASE_URL = 'https://localhost:7002/api/analytics';
        const CORE_API_URL = 'https://localhost:7000/api';

        let categoryChart = null;
        let statusChart = null;

        document.addEventListener('DOMContentLoaded', async function () {
            const token = await ensureValidAccessToken();
            if (!token) {
                window.location.href = "/Login";
                throw new Error('No valid token');
            }

            await loadCategories();
            await loadDashboardData();
            await loadTrendingArticles();

            document.getElementById('applyFilters').addEventListener('click', async () => {
                await loadDashboardData();
                await loadTrendingArticles();
            });

            document.getElementById('clearFilters').addEventListener('click', () => {
                document.getElementById('fromDate').value = '';
                document.getElementById('toDate').value = '';
                document.getElementById('categoryFilter').value = '';
                document.getElementById('statusFilter').value = '';
                loadDashboardData();
                loadTrendingArticles();
            });

            document.getElementById('exportBtn').addEventListener('click', exportToExcel);
        });

        async function loadCategories() {
            try {
                const token = localStorage.getItem('accessToken');
                const response = await fetch(`${CORE_API_URL}/category`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (response.ok) {
                    const result = await response.json();
                    const categories = result.data || result;
                    const categorySelect = document.getElementById('categoryFilter');

                    if (Array.isArray(categories)) {
                        categories.forEach(category => {
                            const option = document.createElement('option');
                            option.value = category.categoryId;
                            option.textContent = category.categoryName;
                            categorySelect.appendChild(option);
                        });
                    }
                }
            } catch (error) {
                console.error('Error loading categories:', error);
            }
        }

        function getFilters() {
            const params = new URLSearchParams();
            const fromDate = document.getElementById('fromDate').value;
            const toDate = document.getElementById('toDate').value;
            const category = document.getElementById('categoryFilter').value;
            const status = document.getElementById('statusFilter').value;

            if (fromDate) params.append('FromDate', fromDate);
            if (toDate) params.append('ToDate', toDate);
            if (category) params.append('CategoryId', category);
            if (status !== '') params.append('NewsStatus', status);

            return params.toString();
        }

        async function loadDashboardData() {
            showLoading(true);
            try {
                const token = localStorage.getItem('accessToken');
                const filters = getFilters();
                const url = `${API_BASE_URL}/dashboard${filters ? '?' + filters : ''}`;

                const response = await fetch(url, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (!response.ok) throw new Error('Failed to fetch analytics data');

                const data = await response.json();
                console.log('Dashboard data:', data);

                updateStats(data);
                updateCharts(data);
            } catch (error) {
                console.error('Error loading dashboard data:', error);
                showNotification('Error loading dashboard data', 'error');
            } finally {
                showLoading(false);
            }
        }

        function updateStats(data) {
            const totalPublished = data.newsStatusAnalytics.totalPublished;
            const totalNotPublished = data.newsStatusAnalytics.totalNotPublished;
            const totalArticles = totalPublished + totalNotPublished;
            const totalCategories = data.newsAnalytics.length;

            document.getElementById('totalPublished').textContent = totalPublished;
            document.getElementById('totalNotPublished').textContent = totalNotPublished;
            document.getElementById('totalArticles').textContent = totalArticles;
            document.getElementById('totalCategories').textContent = totalCategories;

            const publishedPercent = totalArticles > 0 ? ((totalPublished / totalArticles) * 100).toFixed(1) : 0;
            const notPublishedPercent = totalArticles > 0 ? ((totalNotPublished / totalArticles) * 100).toFixed(1) : 0;

            document.getElementById('publishedPercentage').textContent = `${publishedPercent}%`;
            document.getElementById('notPublishedPercentage').textContent = `${notPublishedPercent}%`;
        }

        function updateCharts(data) {
            const categoryLabels = data.newsAnalytics.map(item => item.category);
            const publishedData = data.newsAnalytics.map(item => item.published);
            const notPublishedData = data.newsAnalytics.map(item => item.notPublished);

            if (categoryChart) categoryChart.destroy();

            const categoryCtx = document.getElementById('categoryChart').getContext('2d');
            categoryChart = new Chart(categoryCtx, {
                type: 'bar',
                data: {
                    labels: categoryLabels,
                    datasets: [
                        {
                            label: 'Published',
                            data: publishedData,
                            backgroundColor: 'rgba(16, 185, 129, 0.8)',
                            borderColor: 'rgba(16, 185, 129, 1)',
                            borderWidth: 2
                        },
                        {
                            label: 'Not Published',
                            data: notPublishedData,
                            backgroundColor: 'rgba(245, 158, 11, 0.8)',
                            borderColor: 'rgba(245, 158, 11, 1)',
                            borderWidth: 2
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { position: 'top' }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: { stepSize: 1 }
                        }
                    }
                }
            });

            if (statusChart) statusChart.destroy();

            const statusCtx = document.getElementById('statusChart').getContext('2d');
            statusChart = new Chart(statusCtx, {
                type: 'pie',
                data: {
                    labels: ['Published', 'Not Published'],
                    datasets: [{
                        data: [
                            data.newsStatusAnalytics.totalPublished,
                            data.newsStatusAnalytics.totalNotPublished
                        ],
                        backgroundColor: [
                            'rgba(16, 185, 129, 0.8)',
                            'rgba(245, 158, 11, 0.8)'
                        ],
                        borderColor: [
                            'rgba(16, 185, 129, 1)',
                            'rgba(245, 158, 11, 1)'
                        ],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { position: 'bottom' }
                    }
                }
            });
        }

        async function loadTrendingArticles() {
            try {
                const token = localStorage.getItem('accessToken');
                const filters = getFilters();
                const url = `${API_BASE_URL}/trending${filters ? '?' + filters : ''}`;

                const response = await fetch(url, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (!response.ok) throw new Error('Failed to fetch trending articles');

                const result = await response.json();
                console.log('Trending data:', result);

                const articles = result.data || result;
                displayTrendingArticles(articles);
            } catch (error) {
                console.error('Error loading trending articles:', error);
                showNotification('Error loading trending articles', 'error');
            }
        }

        function displayTrendingArticles(articles) {
            const trendingList = document.getElementById('trendingList');
            const emptyState = document.getElementById('emptyTrending');
            const countBadge = document.getElementById('trendingCount');

            if (!articles || articles.length === 0) {
                trendingList.innerHTML = '';
                emptyState.classList.remove('hidden');
                countBadge.textContent = '0 articles';
                return;
            }

            emptyState.classList.add('hidden');
            countBadge.textContent = `${articles.length} articles`;

            trendingList.innerHTML = articles.map((article, index) => `
                <div class="trending-item p-4 border border-gray-200 rounded-lg hover:shadow-md transition-all cursor-pointer">
                    <div class="flex items-start justify-between">
                        <div class="flex-1">
                            <div class="flex items-center gap-3 mb-2">
                                <span class="text-2xl font-bold text-purple-600">#${index + 1}</span>
                                <span class="px-3 py-1 text-xs font-semibold rounded-full ${article.newsStatus ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                                    ${article.newsStatus ? 'Published' : 'Draft'}
                                </span>
                                <span class="px-3 py-1 text-xs font-semibold bg-blue-100 text-blue-800 rounded-full">
                                    ${article.categoryName || 'Uncategorized'}
                                </span>
                            </div>
                            <h4 class="text-lg font-semibold text-gray-800 mb-1">${escapeHtml(article.newsTitle)}</h4>
                            <p class="text-sm text-gray-600 mb-2 line-clamp-2">${escapeHtml(article.headline)}</p>
                            <div class="flex items-center gap-4 text-sm text-gray-500">
                                <span class="flex items-center gap-1">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                    </svg>
                                    ${formatNumber(article.view || 0)} views
                                </span>
                                <span>👤 ${escapeHtml(article.createdByName || 'Unknown')}</span>
                                <span>📅 ${formatDate(article.createdDate)}</span>
                            </div>
                        </div>
                        <div class="ml-4">
                            <div class="text-right">
                                <div class="text-3xl font-bold text-purple-600">${formatNumber(article.view || 0)}</div>
                                <div class="text-xs text-gray-500 uppercase">Views</div>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        async function exportToExcel() {
            showLoading(true);
            try {
                const token = localStorage.getItem('accessToken');
                const response = await fetch(`${API_BASE_URL}/export`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to export data');
                }

                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Export failed');
                }

                const blob = await response.blob();

                let filename = 'analytics-export.xlsx';
                const contentDisposition = response.headers.get('Content-Disposition');
                if (contentDisposition) {
                    const filenameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
                    if (filenameMatch && filenameMatch[1]) {
                        filename = filenameMatch[1].replace(/['"]/g, '');
                    }
                }

                const url = window.URL.createObjectURL(blob);

                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = filename;

                document.body.appendChild(a);
                a.click();

                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);

                showNotification('Export successful! File has been downloaded.', 'success');

            } catch (error) {
                console.error('Error exporting data:', error);
                showNotification('Error exporting data: ' + error.message, 'error');
            } finally {
                showLoading(false);
            }
        }

        function showLoading(show) {
            const overlay = document.getElementById('loadingOverlay');
            if (show) {
                overlay.classList.remove('hidden');
                overlay.classList.add('show');
            } else {
                overlay.classList.add('hidden');
                overlay.classList.remove('show');
            }
        }

        function showNotification(message, type = 'info') {
            const toast = document.createElement('div');
            const bgColor = type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500';

            toast.className = `fixed top-20 right-5 ${bgColor} text-white px-6 py-4 rounded-lg shadow-xl z-50 animate-slide-in max-w-md`;
            toast.innerHTML = `
                <div class="flex items-center gap-3">
                    <p class="font-medium">${escapeHtml(message)}</p>
                </div>
            `;

            document.body.appendChild(toast);
            setTimeout(() => {
                toast.classList.add('animate-slide-out');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        function formatNumber(num) {
            if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
            if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
            return num.toString();
        }

        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
        }

        function escapeHtml(text) {
            if (!text) return '';
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    </script>
}